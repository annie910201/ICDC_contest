module JAM (CLK, RST, W,J, Cost,MatchCount,MinCost, Valid );
input CLK;
input RST;
output reg [2:0] W;
output reg [2:0] J;
input [6:0] Cost;
output reg [3:0] MatchCount;
output reg [9:0] MinCost;
output reg Valid ;
reg [6:0] costArr [63:0];
reg [6:0] min_series [63:0];
reg [9:0] nowRow;
reg [16:0] i;
reg [9:0] now_Min;
reg [9:0] now_cost;
reg [3:0] count_minCost;
reg [8:0] count_input;
reg [1:0] mode;
reg [2:0] combination [7:0];
reg [17:0] count_round;
reg count_over;
reg [2:0] md;
reg [2:0] idx;
reg [3:0] pivotRight;
reg [3:0] count_idx;

always @(posedge CLK or posedge RST)
begin
    if(RST)
    begin
        nowRow <= 0;
        W <= 0;
        J <= 0;
        MatchCount <= 0;
        MinCost <= 0;
        Valid <= 0;
        i <= 0;
        for(i=0;i<9'd64;i = i+1)
        begin
            costArr[i] <= 0;
            min_series[i] <= 0;
        end
        for(i=0;i<9'd8;i = i+1)
        begin
            combination[i]<= i;
        end
        now_Min <= 10'd1023;
        now_cost <= 0;
        count_minCost <= 0;
        count_input <= 0;
        mode <= 0;
        count_round <= 0;
        count_over <= 1;
        md <= 0;
        idx <= 0;
        pivotRight <= 0;
        count_idx <= 0;
    end
    else
    begin
        if(mode == 2'b00)//input mode
        begin
            if(J<3'd7 && count_input<9'd64)
            begin
                J <= J+1;
                W <= W;
                count_input <= count_input+1;
                costArr[count_input] <= Cost;
            end
            else
            begin
                if(W<=3'd7&& count_input<9'd64)
                begin
                    J <= 0;
                    W <= W+1;
                    count_input <= count_input+1;
                    costArr[count_input] <= Cost;
                end
                else
                begin
                    mode <= mode +1;
                    md <= 0;
                end
            end
        end
        else if(mode ==2'b01)
        begin//calculate mode
            if(count_round<17'd40320)
            begin
                
                if(count_over)
                begin
                    count_round <= count_round+1;
                    now_cost <= costArr[combination[0]]+ costArr[combination[1]+8]+ costArr[combination[2]+16]+ costArr[combination[3]+24]+ costArr[combination[4]+32]+ costArr[combination[5]+40]+ costArr[combination[6]+48]+ costArr[combination[7]+56];
                    if(now_cost<now_Min)
                    begin
                        for(i=8;i<(nowRow<<3);i = i+1)
                        begin
                            min_series[i] <= 0;
                        end
                        now_Min <= now_cost;
                        for(i=0;i<8;i = i+1)
                            min_series[i] <= combination[i];
                        nowRow <= 1;
                    end
                    else if(now_cost==now_Min)
                    begin
                        for(i=0;i<8;i = i+1)
                            min_series[(nowRow<<3)+i] <= combination[i];
                        nowRow <= nowRow+1;
                    end
                    count_over <= 0;
                end
                else
                begin
                    if(md==3'b000)
                    begin
                        if(combination[6]<combination[7])
                            idx<=6;
                        else if(combination[5]<combination[6])
                            idx<=5;
                        else if(combination[4]<combination[5])
                            idx<=4;
                        else if(combination[3]<combination[4])
                            idx<=3;
                        else if(combination[2]<combination[3])
                            idx<=2;
                        else if(combination[1]<combination[2])
                            idx<=1;
                        else if(combination[0]<combination[1])
                            idx<=0;
                        md <=md+1;

                    end
                    else if(md==3'b001)
                    begin
                        count_idx<= idx+1;
                        pivotRight <= 4'd8;
                        md <= md+1;
                    end
                    else if(md==3'b010)
                    begin

                        if(count_idx != 8)
                        begin
                            count_idx <= count_idx +1;
                            if(combination[idx]<combination[count_idx] && (pivotRight==4'd8|| combination[count_idx]< combination[pivotRight]))
                            begin
                                pivotRight <= count_idx;
                            end
                        end
                        else
                            md<=md+1;
                    end
                    else if(md==3'b011)
                    begin
                        combination[idx] <= combination[pivotRight];
                        combination[pivotRight] <= combination[idx];
                        md <= md+1;
                    end
                    else if(md == 3'b100)
                    begin
                        for(i=idx+1;i<8;i=i+1)
                        begin
                            combination[i] <= combination[7-i+idx+1];
                        end
                        md <= 0;
                        count_over <= 1;
                    end
                end
            end
            else
            begin
                mode <= mode+1;
                Valid <= 1;
                MatchCount <= nowRow;
                MinCost <= now_Min;
            end

        end
        else if(mode ==2'b10)
        begin//output mode
            Valid <= 0;
            mode <= 0;
        end

    end
end

endmodule


